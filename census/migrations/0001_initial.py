# Generated by Django 4.2.3 on 2024-02-02 14:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tasks', '0004_partner_inn'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessoriesCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=1000, verbose_name='Категория аксессуаров')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
            ],
            options={
                'verbose_name': 'Список категорий аксессуаров',
                'verbose_name_plural': 'Списки категорий аксессуаров',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='AccessoriesCategoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Марка')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='census.accessoriescategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Список брендов в категории аксессуаров',
                'verbose_name_plural': 'Списки брендов в категории аксессуаров',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='B2BOthers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment', models.CharField(max_length=200, verbose_name='Другой парк техники')),
            ],
        ),
        migrations.CreateModel(
            name='CarsList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Марка автомобиля')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
            ],
            options={
                'verbose_name': 'Список автомобилей торговой точки',
                'verbose_name_plural': 'Списки автомобилей торговой точки',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Census',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_id', models.PositiveBigIntegerField(verbose_name='ID адреса в 1С')),
                ('address', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Адрес')),
                ('name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Название')),
                ('point_name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Вывеска')),
                ('other_vector', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Другое направление')),
                ('nets', models.BooleanField(default=False, verbose_name='Сетевой')),
                ('elevators_count', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Количество подъемников')),
                ('oil_debit', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('lukoil_debit', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('rowe_debit', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('motul_debit', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('vitex_debit', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('decision_firstname', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Фамилия')),
                ('decision_lastname', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Имя')),
                ('decision_surname', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Отчество')),
                ('decision_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='ЛПР_email')),
                ('decision_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('decision_function', models.CharField(blank=True, max_length=300, null=True, verbose_name='Должность')),
                ('other_brand', models.TextField(blank=True, null=True, verbose_name='Другие бренды аксессуаров')),
                ('akb_specify', models.BooleanField(default=False, verbose_name='Специализированная точка по АКБ?')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edited', models.BooleanField(default=False)),
                ('other_providers', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Другие поставщики')),
                ('task', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Номер задачи')),
                ('inn', models.CharField(blank=True, default=None, max_length=12, null=True, verbose_name='ИНН')),
                ('organizations_name', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Название организации')),
                ('tender', models.BooleanField(default=False, verbose_name='Тендер')),
                ('closing', models.BooleanField(default=False, verbose_name='Точка закрыта')),
                ('not_communicate', models.BooleanField(default=False, verbose_name='Нет коммуникации')),
                ('position', models.CharField(blank=True, max_length=100, null=True, verbose_name='Местоположение')),
                ('accessories_brands', models.ManyToManyField(blank=True, default=None, to='census.accessoriescategoryitem', verbose_name='Бренды аксессуаров')),
                ('accessories_category', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='census.accessoriescategory', verbose_name='Категории аксессуаров')),
                ('b2b', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='census.b2bothers')),
                ('cars', models.ManyToManyField(blank=True, default=None, to='census.carslist', verbose_name='Автомобили обслуживают')),
            ],
            options={
                'verbose_name': 'Сенсус',
                'verbose_name_plural': 'Сенсусы',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='CompanyDatabase',
            fields=[
                ('inn', models.CharField(max_length=12, primary_key=True, serialize=False, verbose_name='inn')),
                ('value', models.CharField(max_length=2000, verbose_name='Наименование компании')),
                ('kpp', models.CharField(blank=True, default=None, max_length=9, null=True, verbose_name='КПП')),
                ('ogrn', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='ОГРН')),
                ('ogrn_date', models.DateField(blank=True, default=None, null=True, verbose_name='Дата выдачи ОГРН')),
                ('hid', models.CharField(max_length=2000, verbose_name='Внутренний идентификатор в Дадате')),
                ('type', models.CharField(blank=True, default=None, max_length=10, null=True, verbose_name='Тип организации')),
                ('full_with_opf', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='Наименование компании')),
                ('short_with_opf', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Краткое наименование')),
                ('full', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Полное наименование без ОПФ')),
                ('short', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Краткое наименование без ОПФ')),
                ('fio_surname', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Фамилия ИП')),
                ('fio_name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Имя ИП')),
                ('fio_patronymic', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Отчество ИП')),
                ('okato', models.CharField(blank=True, default=None, max_length=11, null=True, verbose_name='ОКАТО')),
                ('oktmo', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='ОКТМО')),
                ('okpo', models.CharField(blank=True, default=None, max_length=14, null=True, verbose_name='ОКПО')),
                ('okogu', models.CharField(blank=True, default=None, max_length=7, null=True, verbose_name='ОКОГУ')),
                ('okfs', models.CharField(blank=True, default=None, max_length=61, null=True, verbose_name='ОКФС')),
                ('okved', models.CharField(blank=True, default=None, max_length=61, null=True, verbose_name='ОКВЭД')),
                ('okved_type', models.CharField(blank=True, default=None, max_length=4, null=True, verbose_name='Версия справочника ОКВЭД (2001 или 2014)')),
                ('opf_code', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='код ОКОПФ')),
                ('opf_full', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='полное название ОПФ')),
                ('opf_short', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='краткое название ОПФ')),
                ('opf_type', models.CharField(blank=True, default=None, max_length=4, null=True, verbose_name='краткое название ОПФ')),
                ('management_name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='ФИО руководителя')),
                ('management_post', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='должность руководителя')),
                ('branch_count', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Количество филиалов')),
                ('branch_type', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Тип подразделения')),
                ('address_value', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Адрес одной строкой')),
                ('address_unrestricted_value', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='адрес одной строкой (полный, с индексом)')),
                ('address_data', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='гранулярный адрес')),
                ('address_data_source', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='адрес одной строкой как в ЕГРЮЛ')),
                ('address_qc', models.CharField(blank=True, default=None, max_length=1, null=True, verbose_name='код проверки адреса')),
                ('address_latitude', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Широта_DADATA')),
                ('address_longitude', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Долгота_DADATA')),
                ('actuality_date', models.DateField(blank=True, default=None, null=True, verbose_name='дата последних изменений')),
                ('registration_date', models.DateField(blank=True, default=None, null=True, verbose_name='дата регистрации')),
                ('liquidation_date', models.DateField(blank=True, default=None, null=True, verbose_name='дата ликвидации')),
                ('status', models.CharField(blank=True, choices=[('ACTIVE', 'действующая'), ('LIQUIDATING', 'ликвидируется'), ('LIQUIDATED', 'ликвидирована'), ('BANKRUPT', 'банкротство'), ('REORGANIZING', 'в процессе присоединения к другому юр.лицу, с последующей ликвидацией')], default=None, max_length=500, null=True, verbose_name='статус организации')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=20, verbose_name='Имя')),
            ],
            options={
                'verbose_name': 'Подразделение',
                'verbose_name_plural': 'Подразделения',
            },
        ),
        migrations.CreateModel(
            name='PointVectors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Имя направления торговой точки')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('slug', models.SlugField(blank=True, default=None, null=True)),
                ('department', models.ManyToManyField(related_name='vectors', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Направленность/Используемые продукты',
                'verbose_name_plural': 'Направленность/Используемые продукты',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Название')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='volume', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Объем',
                'verbose_name_plural': 'Объем',
            },
        ),
        migrations.CreateModel(
            name='VolumeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(default=0, max_length=500, verbose_name='Значение')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('census', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='census.census')),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='census.volume')),
            ],
        ),
        migrations.CreateModel(
            name='STOTypeList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Тип СТО')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='sto_types', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Список типов СТО торговой точки',
                'verbose_name_plural': 'Списки типов СТО торговой точки',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ProviderList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Марка масла')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='providers', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Список поставщиков торговой точки',
                'verbose_name_plural': 'Списки поставщиков торговой точки',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='PointVectorsSelectItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=1000, verbose_name='Название')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='point_vectors', to='census.department', verbose_name='Подразделение')),
                ('vectors', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='census.pointvectors')),
            ],
        ),
        migrations.CreateModel(
            name='PointVectorsItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('census', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='census.census')),
                ('value', models.ManyToManyField(blank=True, default=None, related_name='vector_items', to='census.pointvectorsselectitem')),
                ('vectors', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='census.pointvectors')),
            ],
        ),
        migrations.CreateModel(
            name='PointTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Тип торговой точки')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='types', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Тип',
                'verbose_name_plural': 'Типы',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='PointCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Имя категории')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='category', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Категория/Сегмент торговой точки',
                'verbose_name_plural': 'Категории/Сегмент торговых точек',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='OilList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Марка масла')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('slug', models.SlugField(blank=True, default=None, null=True)),
                ('department', models.ManyToManyField(related_name='oils', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Список масел торговой точки',
                'verbose_name_plural': 'Списки масел торговой точки',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='FilterList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Марка фильтра')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='filters', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Список фильтров торговой точки',
                'verbose_name_plural': 'Списки фильтров торговой точки',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='EquipmentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активность')),
                ('name', models.CharField(max_length=500, verbose_name='Название')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('edit_date', models.DateField(auto_now=True, verbose_name='Дата изменения')),
                ('department', models.ManyToManyField(related_name='equipment_list', to='census.department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Парк техники',
                'verbose_name_plural': 'Парк техники',
            },
        ),
        migrations.CreateModel(
            name='CensusFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('file', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('edited', models.BooleanField(default=False)),
                ('census', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='census.census', verbose_name='Сенсус')),
            ],
            options={
                'verbose_name': 'Фото Сенсус',
                'verbose_name_plural': 'Фото Сенсусы',
                'ordering': ['-created_date'],
            },
        ),
        migrations.AddField(
            model_name='census',
            name='category',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='census.pointcategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='census',
            name='dadata',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='census.companydatabase'),
        ),
        migrations.AddField(
            model_name='census',
            name='department',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='census.department', verbose_name='Подразделение'),
        ),
        migrations.AddField(
            model_name='census',
            name='equipment',
            field=models.ManyToManyField(blank=True, default=None, related_name='census_equipments', to='census.equipmentlist'),
        ),
        migrations.AddField(
            model_name='census',
            name='filters',
            field=models.ManyToManyField(blank=True, default=None, to='census.filterlist', verbose_name='Фильтры используют'),
        ),
        migrations.AddField(
            model_name='census',
            name='oils',
            field=models.ManyToManyField(blank=True, default=None, to='census.oillist', verbose_name='Масла используют'),
        ),
        migrations.AddField(
            model_name='census',
            name='point_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='census.pointtypes', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='census',
            name='providers',
            field=models.ManyToManyField(blank=True, default=None, to='census.providerlist', verbose_name='Основные поставщики'),
        ),
        migrations.AddField(
            model_name='census',
            name='result',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tasks.result', verbose_name='Результат встречи'),
        ),
        migrations.AddField(
            model_name='census',
            name='sto_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='census.stotypelist', verbose_name='Тип СТО'),
        ),
        migrations.AddField(
            model_name='census',
            name='vector',
            field=models.ManyToManyField(blank=True, default=None, to='census.pointvectors', verbose_name='Направленность'),
        ),
        migrations.AddField(
            model_name='census',
            name='vectors',
            field=models.ManyToManyField(blank=True, default=None, related_name='census_vectors', to='census.pointvectorsitem'),
        ),
        migrations.AddField(
            model_name='census',
            name='volume',
            field=models.ManyToManyField(blank=True, related_name='census_volumes', to='census.volumeitem'),
        ),
        migrations.AddField(
            model_name='census',
            name='working',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tasks.partner', verbose_name='Контрагент в 1С'),
        ),
        migrations.AddField(
            model_name='carslist',
            name='department',
            field=models.ManyToManyField(related_name='cars', to='census.department', verbose_name='Подразделение'),
        ),
        migrations.AddField(
            model_name='accessoriescategory',
            name='department',
            field=models.ManyToManyField(related_name='accessories_category', to='census.department', verbose_name='Подразделение'),
        ),
    ]
